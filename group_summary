# Sum based on one column without using groupby 
# Calc total weekly sales
sales.head()
sales_all = sales["weekly_sales"].sum()
print(sales_all)
# Subset for type A stores, calc total weekly sales
sales_A = sales[sales["type"]=='A']["weekly_sales"].sum()
print(sales_A)

# Subset for type B stores, calc total weekly sales
sales_B = sales[sales["type"]=='B']["weekly_sales"].sum()

# Subset for type C stores, calc total weekly sales
sales_C = sales[sales["type"]=='C']["weekly_sales"].sum()

# Get proportion for each type
sales_propn_by_type = [sales_A, sales_B, sales_C] / sales_all
print(sales_propn_by_type)

## we get the same results using group.by
# Group by type; calc total weekly sales
sales_by_type = sales.groupby("type")['weekly_sales'].sum()
print(sales_by_type)
# Get proportion for each type
sales_propn_by_type = sales_by_type/ sum(sales_by_type)
print(sales_propn_by_type)

# From previous step
sales_by_type = sales.groupby("type")["weekly_sales"].sum()

# Group by type and is_holiday; calc total weekly sales
sales_by_type_is_holiday = sales.groupby(["type","is_holiday"])["weekly_sales"].sum()
print(sales_by_type_is_holiday)

# Import numpy with the alias np
import numpy as np

# For each store type, aggregate weekly_sales: get min, max, mean, and median
sales_stats =sales.groupby("type")["weekly_sales"].agg([min,max,np.median])

# Print sales_stats
print(sales_stats)

# For each store type, aggregate unemployment and fuel_price_usd_per_l: get min, max, mean, and median
unemp_fuel_stats = sales.groupby("type")[["unemployment","fuel_price_usd_per_l"]].agg([min,max,np.median])

# Print unemp_fuel_stats
print(unemp_fuel_stats)
print(unemp_fuel_stats)
         min        max    median
type                             
A    -1098.0  293966.05  11943.92
B     -798.0  232558.51  13336.08
     unemployment               fuel_price_usd_per_l              
              min    max median                  min    max median
type                                                              
A           3.879  8.992  8.067                0.664  1.107  0.735
B           7.170  9.765  9.199                0.760  1.108  0.803

# Import numpy with the alias np
import numpy as np

# For each store type, aggregate weekly_sales: get min, max, mean, and median
sales_stats =sales.groupby("type")["weekly_sales"].agg([min,max,np.mean,np.median])

# Print sales_stats
print(sales_stats)

# For each store type, aggregate unemployment and fuel_price_usd_per_l: get min, max, mean, and median
unemp_fuel_stats = sales.groupby("type")[["unemployment","fuel_price_usd_per_l"]].agg([min,max,np.mean,np.median])

# Print unemp_fuel_stats
print(unemp_fuel_stats)

###using pivot tables
# Pivot for mean weekly_sales for each store type
mean_sales_by_type = sales.pivot_table(values="weekly_sales",index="type")

# Print mean_sales_by_type
print(mean_sales_by_type)

#pivot table and more than one calculation for same column


###Slicing and indexing
# Look at temperatures
print(temperatures)
temperatures.head()
# Index temperatures by city
temperatures_ind= temperatures.set_index("city")
temperatures_ind.head()
# Look at temperatures_ind
print(temperatures)

# Reset the index, keeping its contents
print(temperatures_ind.reset_index(drop=False))

# Reset the index, dropping its contents
print(temperatures_ind.reset_index(drop=True))

#Subsetting 
# Make a list of cities to subset on
cities = ["Moscow", "Saint Petersburg"]

# Subset temperatures using square brackets
print(temperatures[temperatures["city"].isin(cities)])

# Subset temperatures_ind using .loc[]
print(temperatures_ind.loc[cities])

## Index temperatures by country & city
temperatures_ind = temperatures.set_index(["country","city"])

# List of tuples: Brazil, Rio De Janeiro & Pakistan, Lahore
rows_to_keep = [("Brazil","Rio De Janeiro"),("Pakistan","Lahore")]

# Subset for rows to keep
print(temperatures_ind.loc[rows_to_keep])

##Sorting on multiple index level
# Sort temperatures_ind by index values
print(temperatures_ind.sort_index())

# Sort temperatures_ind by index values at the city level
print(temperatures_ind.sort_index(level="city"))

# Sort temperatures_ind by country then descending city
print(temperatures_ind.sort_index(level=["country","city"],ascending=[True,False]))
